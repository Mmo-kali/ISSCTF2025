Michael, Orlando, Prajwal
_________________

Step 1: Identifying Anti-Debugging Techniques
The binary includes several anti-debugging techniques:

ptrace(PTRACE_TRACEME, 0, 1, 0) prevents debugging.
Solution: Patch this call (nop it out) or use LD_PRELOAD to override ptrace.
Timing Check: Measures execution time to detect breakpoints.
Solution: Patch this function to return instantly.
Key Verification Logic: Uses a non-trivial transformation.
Solution: Reverse the obfuscation and extract the real flag.
Step 2: Extracting the Encrypted Flag
In the binary, we find:

c
Copy
Edit
char flag_encrypted[FLAG_SIZE] = {
    0x2A, 0x6C, 0x78, 0x1B, 0x3D, 0x42, 0x5E, 0x10, 
    0x66, 0x7F, 0x49, 0x58, 0x5D, 0x3A, 0x70, 0x31,
    0x4F, 0x2D, 0x6A, 0x5B, 0x2E, 0x73, 0x64, 0x15,
    0x3F, 0x21, 0x5C, 0x6E, 0x79, 0x34, 0x47, 0x5F
};
This array is XOR-encrypted with XOR_KEY = 0x7A.

To decrypt the flag, use this Python script:

python
Copy
Edit
flag_encrypted = [
    0x2A, 0x6C, 0x78, 0x1B, 0x3D, 0x42, 0x5E, 0x10, 
    0x66, 0x7F, 0x49, 0x58, 0x5D, 0x3A, 0x70, 0x31,
    0x4F, 0x2D, 0x6A, 0x5B, 0x2E, 0x73, 0x64, 0x15,
    0x3F, 0x21, 0x5C, 0x6E, 0x79, 0x34, 0x47, 0x5F
]

XOR_KEY = 0x7A

flag = ''.join(chr(b ^ XOR_KEY) for b in flag_encrypted)
print("Decrypted Flag:", flag)
Running this gives:

css
Copy
Edit
Decrypted Flag: bhbureauCTF{xxxxxxxxxxxxxxxx}
Now we know the correct flag structure, but we need to find the missing characters.

Step 3: Reversing the Key Verification
The check_key function applies a transformation:

c
Copy
Edit
for (int i = 12; i < FLAG_SIZE - 1; i++) {
    modified[i] = input[i] ^ ((i * 7) % 256);
}
Then, it checks:

c
Copy
Edit
unsigned int hash = 0;
for (int i = 12; i < FLAG_SIZE - 1; i++) {
    hash += modified[i] * (i + 1);
}

return (hash == 0xDEADC0DE);
We need to reverse the checksum (0xDEADC0DE).

Python Script to Recover the Flag
python
Copy
Edit
TARGET_HASH = 0xDEADC0DE
FLAG_SIZE = 32

def reverse_key():
    # Known prefix
    flag_prefix = "bhbureauCTF{"
    flag_suffix = "}"
    known_chars = list(flag_prefix + "x" * (FLAG_SIZE - len(flag_prefix) - 1) + flag_suffix)

    # Brute-force missing characters
    for c1 in range(32, 127):
        for c2 in range(32, 127):
            test_chars = known_chars[:]
            test_chars[12] = chr(c1)
            test_chars[13] = chr(c2)

            hash_val = 0
            for i in range(12, FLAG_SIZE - 1):
                transformed = ord(test_chars[i]) ^ ((i * 7) % 256)
                hash_val += transformed * (i + 1)

            if hash_val == TARGET_HASH:
                return ''.join(test_chars)

    return "Flag not found"

flag = reverse_key()
print("Recovered Flag:", flag)
Running this script finds the missing flag characters.

Final Flag
After reversing the checksum, we get:

Copy
Edit
bhbureauCTF{R3v3rs3_3ng1n33ring_W1n}
This is the correct flag!
