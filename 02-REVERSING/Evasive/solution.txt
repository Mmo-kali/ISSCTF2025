Michael, Orlando, Prajwal
_________________

Step 1: Identifying Anti-Debugging Techniques
The binary includes several anti-debugging techniques:

ptrace(PTRACE_TRACEME, 0, 1, 0) prevents debugging.

Solution: Patch this call (nop it out) or use LD_PRELOAD to override ptrace.

Timing Check: Measures execution time to detect breakpoints.

Solution: Patch this function to return instantly.

Key Verification Logic: Uses a non-trivial transformation.

Solution: Reverse the obfuscation and extract the real flag.

Step 2: Extracting the Encrypted Flag

In the binary, we find:

char flag_encrypted[FLAG_SIZE] = {0x18, 0x12, 0x18, 0x0F, 0x08, 0x1F, 0x1B, 0x0F, 0x39, 0x2E, 0x3C, 0x01, 0x65, 0x45, 0x29, 0x49, 0x19, 0x08, 0x59, 0x0E, 0x2F, 0x14, 0x0C, 0x49, 0x58, 0x16, 0x49, 0x1E, 0x02, 0x57, 0x07};

This array is XOR-encrypted with XOR_KEY = 0x7A.

To decrypt the flag, use this Python script:

flag_encrypted = [0x18, 0x12, 0x18, 0x0F, 0x08, 0x1F, 0x1B, 0x0F, 0x39, 0x2E, 0x3C, 0x01, 0x65, 0x45, 0x29, 0x49, 0x19, 0x08, 0x59, 0x0E, 0x2F, 0x14, 0x0C, 0x49, 0x58, 0x16, 0x49, 0x1E, 0x02, 0x57, 0x07]

XOR_KEY = 0x7A

flag = ''.join(chr(b ^ XOR_KEY) for b in flag_encrypted)
print("Decrypted Flag:", flag)

Running this gives:

Decrypted Flag: bhbureauCTF{�?S3cr#tUnv3"l3dx-}

Now we know the correct flag structure, but we need to find the missing characters.

Step 3: Reversing the Key Verification
The check_key function applies a transformation:

for (int i = 12; i < FLAG_SIZE - 1; i++) {
    modified[i] = input[i] ^ ((i * 7) % 256);
}
Then, it checks:

unsigned int hash = 0;
for (int i = 12; i < FLAG_SIZE - 1; i++) {
    hash += modified[i] * (i + 1);
}

return (hash == 0xFFFFD737);
We need to reverse the checksum (0xFFFFD737).

python script example to do that:

TARGET_HASH = 0xFFFFD737
FLAG_SIZE = 32


def reverse_key():
    # Known prefix
    flag_prefix = "bhbureauCTF{"
    flag_suffix = "}"
    known_chars = list(flag_prefix + "�?S3cr#tUnv3\"l3dx-" + flag_suffix)
    sol = []
    # Brute-force missing characters
    for c1 in range(32, 127):
        for c2 in range(32, 127):
            for c7 in range(32, 127):
                for c13 in range(32, 127):
                    test_chars = known_chars.copy()
                    test_chars[12] = chr(c1)
                    test_chars[13] = chr(c2)
                    test_chars[18] = chr(c7)    # Index 18 = 12+6
                    test_chars[24] = chr(c13)   # Index 24 = 12+12

                    hash_val = 0
                    for i in range(12, FLAG_SIZE - 1):
                        # Compute XOR transformation
                        transformed = ord(test_chars[i]) ^ ((i * 7) % 256)

                        # Convert to signed byte (C-style behavior)
                        if transformed >= 128:
                            transformed -= 256

                        # Accumulate hash with 32-bit overflow
                        hash_val = (hash_val + transformed *
                                    (i + 1)) & 0xFFFFFFFF

                    # Check for match
                    if hash_val == TARGET_HASH:
                        sol.append(''.join(test_chars))

    return sol


flag = reverse_key()
print("Recovered Flag:", flag)


Final Flag
After reversing the checksum, we get:

bhbureauCTF{InS3cr3tUnv31l3dx-}
This is the correct flag!
